{"file":"/Users/qidanta/Documents/webprojects/webpack-eliminate-loader/test/factory.test.ts","mappings":";;AAAA,kDAAsD;AACtD,0CAAuD;AAEvD,QAAQ,CAAC,4BAA4B,EAAE;IACrC,IAAI,CAAC,4DAA4D,EAAE;QACjE,IAAM,MAAM,GAAG,uBAAa,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAS,CAAC,CAAA;QAC9D,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAChC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAClC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACnC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IACtC,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,qDAAqD,EAAE;QAC1D,IAAM,gBAAgB,GAAG,uBAAa,CAAC,MAAM,CAAC,oBAAU,CAAC,CAAA;QACzD,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,oBAAoB,EAAE;YACpD,OAAO,EAAE;gBACP,aAAa;aACd;YACD,OAAO,EAAE;gBACP,oBAAoB;aACrB;SACF,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACd,IAAM,gBAAgB,GAAG,uBAAa,CAAC,MAAM,CAAC,oBAAU,CAAC,CAAA;QACzD,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;QACjD,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,oBAAoB,EAAE;YACpD,OAAO,EAAE;gBACP,aAAa;aACd;YACD,OAAO,EAAE;gBACP,oBAAoB;aACrB;SACF,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IACjB,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA","names":[],"sources":["/Users/qidanta/Documents/webprojects/webpack-eliminate-loader/test/factory.test.ts"],"sourcesContent":["import { presetFactory } from '../src/presets/factory'\nimport { UmiRematch, ReactRoute } from '../src/presets'\n\ndescribe('start test presets.factory', () => {\n  test('the result of factory.create should have all preset method', () => {\n    const preset = presetFactory.create({ name: 'preset' } as any)\n    expect(!!preset.name).toBe(true)\n    expect(!!preset.onInit).toBe(true)\n    expect(!!preset.onMatch).toBe(true)\n    expect(!!preset.onReturn).toBe(true)\n  })\n\n  test('the method of preset should overwrite origin method', () => {\n    const ReactRoutePreset = presetFactory.create(ReactRoute)\n    expect(ReactRoutePreset.onMatch('src/pages/home.jsx', {\n      presets: [\n        'react-route'\n      ],\n      exclude: [\n        'src/pages/home.jsx'\n      ]\n    })).toBe(true)\n    const UmiRematchPreset = presetFactory.create(UmiRematch)\n    expect(UmiRematchPreset.name).toBe('umi-rematch')\n    expect(UmiRematchPreset.onMatch('src/pages/home.jsx', {\n      presets: [\n        'umi-rematch'\n      ],\n      exclude: [\n        'src/pages/home.jsx'\n      ]\n    })).toBe(false)\n  })\n})\n"],"version":3}