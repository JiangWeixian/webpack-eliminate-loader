{"file":"/Users/qidanta/Documents/webprojects/webpack-eliminate-loader/src/utils/match.ts","mappings":";;;AAAA,gEAAiC;AAGjC,IAAM,SAAS,GAAG,UAAC,YAAqB,EAAE,OAAgB;IACxD,IAAI,CAAC,YAAY,IAAI,CAAC,OAAO,EAAE;QAC7B,OAAO,KAAK,CAAA;KACb;IACD,IAAI;QACF,OAAO,mBAAS,CAAC,YAAY,EAAE,OAAO,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA;KACxF;IAAC,WAAM;QACN,OAAO,KAAK,CAAA;KACb;AACH,CAAC,CAAA;AAED;;;;GAIG;AACU,QAAA,WAAW,GAAG,UAAC,YAAqB,EAAE,OAAgC;IAAhC,wBAAA,EAAA,YAAgC;IACjF,IAAI,CAAC,YAAY,IAAI,CAAC,OAAO,EAAE;QAC7B,OAAO,IAAI,CAAA;KACZ;IACD,OAAO,OAAO,CAAC,IAAI,CAAC,UAAA,CAAC;QACnB,OAAO,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAA;IACnC,CAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AAED;;;;GAIG;AACU,QAAA,WAAW,GAAG,UAAC,YAAqB,EAAE,OAAgC;IAAhC,wBAAA,EAAA,YAAgC;IACjF,IAAI,CAAC,YAAY,IAAI,CAAC,OAAO,EAAE;QAC7B,OAAO,KAAK,CAAA;KACb;IACD,OAAO,OAAO,CAAC,IAAI,CAAC,UAAA,CAAC;QACnB,OAAO,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAA;IACnC,CAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AAEY,QAAA,KAAK,GAAG,UAAC,YAAqB,EAAE,OAAiB;IAC5D,IAAI,CAAC,OAAO,IAAI,CAAC,YAAY,EAAE;QAC7B,OAAO,KAAK,CAAA;KACb;IACD,IAAI,OAAO,CAAC,OAAO,EAAE;QACnB,OAAO,CAAC,mBAAW,CAAC,YAAY,EAAE,OAAO,CAAC,OAAO,CAAC,CAAA;KACnD;IACD,IAAI,OAAO,CAAC,OAAO,EAAE;QACnB,OAAO,mBAAW,CAAC,YAAY,EAAE,OAAO,CAAC,OAAO,CAAC,CAAA;KAClD;IACD,OAAO,KAAK,CAAA;AACd,CAAC,CAAA","names":[],"sources":["/Users/qidanta/Documents/webprojects/webpack-eliminate-loader/src/utils/match.ts"],"sourcesContent":["import minimatch from 'minimatch'\nimport { Options } from '@/typings'\n\nconst isMatched = (resourcePath?: string, pattern?: string) => {\n  if (!resourcePath || !pattern) {\n    return false\n  }\n  try {\n    return minimatch(resourcePath, pattern, { dot: true }) || !!resourcePath.match(pattern)\n  } catch {\n    return false\n  }\n}\n\n/**\n * match include will return source\n * @param resourcePath\n * @param include\n */\nexport const hasIncluded = (resourcePath?: string, include: Options['include'] = []) => {\n  if (!resourcePath || !include) {\n    return true\n  }\n  return include.some(v => {\n    return isMatched(resourcePath, v)\n  })\n}\n\n/**\n * match exclude will return tpl\n * @param resourcePath\n * @param exclude\n */\nexport const hasExcluded = (resourcePath?: string, exclude: Options['exclude'] = []) => {\n  if (!resourcePath || !exclude) {\n    return false\n  }\n  return exclude.some(v => {\n    return isMatched(resourcePath, v)\n  })\n}\n\nexport const match = (resourcePath?: string, options?: Options) => {\n  if (!options || !resourcePath) {\n    return false\n  }\n  if (options.include) {\n    return !hasIncluded(resourcePath, options.include)\n  }\n  if (options.exclude) {\n    return hasExcluded(resourcePath, options.exclude)\n  }\n  return false\n}\n"],"version":3}