{"file":"/Users/qidanta/Documents/webprojects/webpack-eliminate-loader/test/match.test.ts","mappings":";;AAAA,yCAAiE;AAEjE,QAAQ,CAAC,wBAAwB,EAAE;IACjC,IAAI,CAAC,2DAA2D,EAAE;QAChE,MAAM,CAAC,mBAAW,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAChD,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,0CAA0C,EAAE;QAC9C,MAAM,CAAC,mBAAW,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC7D,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,4DAA4D,EAAE;QAChE,MAAM,CAAC,mBAAW,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IACjD,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,0CAA0C,EAAE;QAC9C,MAAM,CAAC,mBAAW,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IAC7D,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,qDAAqD,EAAE;QAC3D,MAAM,CAAC,mBAAW,CAAC,oBAAoB,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACrE,MAAM,CAAC,mBAAW,CAAC,oBAAoB,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IACtE,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,qDAAqD,EAAE;QAC3D,MAAM,CAAC,aAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;IAChD,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,gDAAgD,EAAE;QACtD,aAAK,CAAC,oBAAoB,EAAE;YAC3B,OAAO,EAAE;gBACR,aAAa;aACb;YACD,OAAO,EAAE;gBACR,aAAa;aACb;SACD,CAAC,CAAA;IACH,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,+CAA+C,EAAE;QACrD,aAAK,CAAC,oBAAoB,EAAE;YAC3B,OAAO,EAAE;gBACR,aAAa;aACb;YACD,OAAO,EAAE;gBACR,aAAa;aACb;SACD,CAAC,CAAA;IACH,CAAC,CAAC,CAAA;AACH,CAAC,CAAC,CAAA","names":[],"sources":["/Users/qidanta/Documents/webprojects/webpack-eliminate-loader/test/match.test.ts"],"sourcesContent":["import { match, hasIncluded, hasExcluded } from 'src/utils/match'\n\ndescribe('start test utils.match', () => {\n  test('hasInclude should return true when first arg is undefined', () => {\n    expect(hasIncluded(undefined, [])).toBe(true)\n\t})\n\n\ttest('hasInclude should return true when match', () => {\n    expect(hasIncluded('src/pages', ['src/pages'])).toBe(true)\n\t})\n\n\ttest('hasExclude should return false when first arg is undefined', () => {\n    expect(hasExcluded(undefined, [])).toBe(false)\n\t})\n\t\n\ttest('hasInclude should return true when match', () => {\n    expect(hasExcluded('src/pages', ['src/pages'])).toBe(true)\n\t})\n\n\ttest('hasInclude and hasExclude should support glob regex', () => {\n\t\texpect(hasIncluded('src/pages/home.jsx', ['**/pages/**'])).toBe(true)\n\t\texpect(hasExcluded('src/pages/home.jsx', ['**/pages/**'])).toBe(true)\n\t})\n\t\n\ttest('match should return false when options is undefined', () => {\n\t\texpect(match('src/pages/home.jsx')).toBe(false)\n\t})\n\n\ttest('match should return false when include matched', () => {\n\t\tmatch('src/pages/home.jsx', {\n\t\t\tpresets: [\n\t\t\t\t'react-route'\n\t\t\t],\n\t\t\tinclude: [\n\t\t\t\t'**/pages/**'\n\t\t\t]\n\t\t})\n\t})\n\n\ttest('match should return true when exclude matched', () => {\n\t\tmatch('src/pages/home.jsx', {\n\t\t\tpresets: [\n\t\t\t\t'react-route'\n\t\t\t],\n\t\t\texclude: [\n\t\t\t\t'**/pages/**'\n\t\t\t]\n\t\t})\n\t})\n})\n"],"version":3}